# -*- coding: utf-8 -*-
"""Base Python Programming Exercise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L96K4tUBAFqIe7wvUMM_0bDE5WFuioz4

## Python Basic Programming Exercises

##Q1: What is the output of following expression
##  5 + 4 * 9 % (3 + 1) / 6 - 1
"""

5 + 4 * 9 % (3 + 1) / 6 - 1

"""Q2: Write a program to check if a Number is Odd or Even. Take number as a input from user at runtime."""

a = int(input("enter a number : "))
if a%2 == 0:
 print(a, " is an   even number") 
else :
  print(a, " is a odd number")

"""Q3: Write a program to display the multiplication table by taking a number as input. 
    [Hint : Use print statement inside of a loop]
"""

b = int(input("enter a number : "))
i= 0
while i <=10:   
 print(b,"x" , i,'=', b*i)
 i=i +1

"""Q4: Write a program which will find all numbers between 2000 and 3200 which are divisible by 7 
    but are not a multiple of 5.
 
Note: The numbers obtained should be printed in a comma-separated sequence on a single line.
"""

numbers= []
for i in range(2000,3201):
      if (i%7==0) and (i%5!=0):
           
             numbers.append(i)  

print(numbers)

"""Q5: Count the elements of each datatype inside the list and display in output
    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]

> 


"""

e = [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]


int_count = 0
float_count = 0
str_count = 0
bool_count = 0
none_count = 0

for item in e:
    if isinstance(item, bool):
      bool_count += 1
    elif isinstance(item, int):
        int_count += 1
        
    elif isinstance(item, float):
        float_count += 1
    elif isinstance(item, str):
        str_count += 1

    elif item is None:
        none_count += 1


print("Integer count:", int_count)
print("Float count:", float_count)
print("String count:", str_count)
print("Boolean count:", bool_count)
print("None count:", none_count)

"""Q6: Add all values from the list with numeric datatypes 
    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7] 
"""

f=  [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7] 

g= 0 
for i in f:
  if isinstance (i, int ):
    abc.append(i)
    g = g+i - isinstance(i,bool)
print(g)

"""Q7: Concat all str datatypes with hyphen as a delimiter
    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7] 
"""

h =  [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7] 

'-'.join(filter(lambda x: type(x)==str,h))

"""Q8: Write a UDF that takes list as input and returns sum of all numbers 
    (exclude bool) and count of all str 
    [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7] 
    
Hint:
-----
def my_func:
    # your code
        
my_func(l1)
# output --> {'Sum': xxx, 'Count_of_Strs': xxx}
"""

k = [2, 3, 'Py', '10', 1, 'SQL', 5.5, True, 3, 'John', None, 7]

def my_func(l):
    dict1 = {}
     
    dict1['sum of all numbers (exclude bool)'] = sum([float(i) for i in l if type(i)== int or type(i)== float])
    dict1['count of all str'] = len([str(i) for i in l if type(i)== str])
    return dict1

my_func(k)

"""Q9: Get only odd numbers from the following list and store the numbers in new list
    li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]

    i. Use loops to get the answer
   ii. Use list comprehensions
  iii. Use lambda function with filter
"""

li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]

 ##i loops
m  = []
for i in li :
  if i%2 != 0:
     m.append(i)


print('using loops:' , m)

##ii  list comprehensions 

n = [i for i in li if i %2 != 0]
print("using list comprehensions:", n)
### iii lamba with filter
o = list(filter(lambda i: (i % 2 != 0), li))
print ('using lambda function with filter :',o)

"""Q10: Write a UDF to return the descriptives [sum, count, min, mean, max] for a list of n number of input 
    numbers.
"""

from statistics import mean
def my_agg(l1,agg_type):
    agg_type = agg_type.lower()
    l1 = [i if str(i).isnumeric() else 0 for i in l1]
    if agg_type == 'sum':
        result = 0
        for i in l1:
            result = result + i
        return result
        if agg_type == 'count':
            result = len(l1)
        return result
    
    
    if agg_type == 'max':
        result = max(l1)
        return result
    
    if agg_type == 'min':
        result = min(l1)
        return result
    
    if agg_type == 'mean':
        result = mean(l1)
        return result
    
# creating an empty list
lst = []
 
# number of elements as input
n = int(input("Enter number of elements : "))
 
# iterating till the range
for i in range(0, n):
    ele = int(input())
    # adding the element
    lst.append(ele) 

bfff = input("sum, count, min, mean, max")
print(lst)
my_agg(lst,bfff)

""".Q11: Write an udf to calculate the area of different shapes

Take shape and dimensions as arguments to udf as follows : 

1. square which has side
2. rectangle which has length and width
3. circle which has radius

The shape should be a positional argument and it's dimensions are taken as kwargs

Perform proper validation for the user inputs and then calculate area.

E.g. if shape is square, ensure kwargs has "side" and if so, then you may return the area, else display appropriate error message like "Please enter 'side' for a square"
"""

from IPython.core.interactiveshell import Integer
shape_name = input(" Enter the Shape:")

def area(shape) : 
  shape = shape.lower

  if shape_name == "square" :
    side = int(input("enter the length of square's side :  "))
    area_sqaure = side * side 
    print( "area of square with side" , side , " is" ,area_sqaure )
  
  if shape_name == "rectangle" : 
    length = int(input("enter the length of rectangle :  "))
    breadth = int(input("enter the breadth of rectangle :  "))
    area_rectangle = length * breadth
    print( "area of rectangle  with length " , length , "and breadth" , breadth, " is" ,area_rectangle )
  
  if shape_name == "circle" : 
    radius = int(input("enter the radius of circle :  "))
    area_circle = 22/7*radius*radius
    print( "area of circle  with radius" , radius , " is" ,area_circle )

area(shape_name)

"""Q12: Write a UDF to reconcile the values within two lists.
    l1 = ['January', 'February', 'March', 'May', 'June', 'September', 'December']
    l2 = ['January', 'February', 'April', 'June', 'October', 'December']

Hint:
-----
def func(l1, l2):
    your code here...
    
Output:
{'Matched': ['January', 'February', 'June', 'December'],
    'Only in l1': ['March', 'May', 'September'],
        'Only in l2': ['April', 'October']}
"""

l1 = ['January', 'February', 'March', 'May', 'June', 'September', 'December']
l2 = ['January', 'February', 'April', 'June', 'October', 'December']

def func(l1,l2):
  x = set(l1)
  y = set(l2)
  matched = list(x.intersection(y))
  only_l1 = list(x-y)
  only_l2 = list(y-x)
  print("{","matched: ", matched , "only in l1", only_l1, "only in l2", only_l2,"}")

func(l1,l2)

"""Q13: write a UDF to check if a number is prime or not."""

3%9

z = int(input("Enter the number: "))

def prime_func(x):
    if x == 0 or x == 1:
        print("Neither prime nor composite")
    elif x == 2:
        print("Prime number")
    else:
        c = x**(1/2)
        is_prime = True
        for i in range(2, int(c) + 1):
            if x % i == 0:
                is_prime = False
                break
        if is_prime:
            print("Prime number")
        else:
            print("Not prime")

prime_func(z)

"""Q14. Write a program which can compute the factorial of a given numbers. 
#   The results should be printed in a comma-separated sequence on a single line. 
# input() function can be used for getting user(console) input


#Suppose the input is supplied to the program:  8  
#Then, the output should be:  40320 
#Hints: In case of input data being supplied to the question, it should be assumed to be a console input. 

"""

z = int(input("enter the number : "))

if z <0:
  print("factorial is not possible for negative numbers.")

f = 1 

for i in range (1,z+1):
  f = f*i
print("factorial of " , z , "is",f)

"""Q15. With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.

#Suppose the following input is supplied to the program: 8
#Then, the output should be: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}
#Hints: In case of input data being supplied to the question, it should be assumed to be a console input. Consider using dict()


"""

x = int(input("enter a number:"))

dic = {i : i*i for i in range (1,x+1)}
dic

"""Q16. Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.
#Suppose the following input is supplied to the program: 34,67,55,33,12,98
    #Then, the output should be: ['34', '67', '55', '33', '12', '98'] ('34', '67', '55', '33', '12', '98')

#Hints: In case of input data being supplied to the question, it should be assumed to be a console input. you may use tuple() method to convert list to tuple

"""

numbers = input('Enter a sequence of comma-separated numbers : ' )

numbers_split = numbers.split(',')

number_tuple = tuple(numbers_split)

print(numbers_split , end = ' ')
print(number_tuple)

"""Q17. Write a program that accepts a comma separated sequence of words as input and 
# prints the words in a comma-separated sequence after sorting them alphabetically.

# Suppose the following input is supplied to the program: without,hello,bag,world
# Then, the output should be: bag,hello,without,world

#Hints: In case of input data being supplied to the question, it should be assumed to be a console input.

"""

words = input("enter comma separated words: ")

words_split = words.split(",")
words_split.sort

print(words_split)

"""Q18. Write a program that accepts a sequence of whitespace separated words 
# as input and prints the words after removing all duplicate words and sorting them alphanumerically.
# Suppose the following input is supplied to the program: hello world and practice makes perfect and hello world again
# Then, the output should be: again and hello makes perfect practice world

#Hints: In case of input data being supplied to the question, it should be assumed to be a console input.
#We use set container to remove duplicated data automatically and then use sorted() to sort the data.

"""

words = input("enter whitepsace separated words")

words_split = words.split(" ")

words = set(words_split)
sorted_words = sorted(words)
print((' ').join(sorted_words))

"""Q19. Write a program that accepts a sentence and calculate the number of upper case 
# letters and lower case letters.
#Suppose the following input is supplied to the program: Hello world!
#Then, the output should be: UPPER CASE 1 LOWER CASE 9

#Hints: In case of input data being supplied to the question, it should be assumed to be a console input.

"""

sentense = input('Enter a sentence : ')
sentense = list(sentense)

upper,lower = 0 , 0

for i in sentense:
    if i.isupper():
        upper = upper + 1
        
    if i.islower():
        lower = lower + 1
    else:
        pass
        
print('UPPER CASE ',upper,'LOWER CASE ',lower)

"""Q20. Write a program that takes a string and returns reversed string. i.e. if input is "abcd123" output should be "321dcba"
"""

str1 = input('Enter a string : ')
str1 = str1[::-1]
print(str1)

